<tool id="flexynesis_plot" name="Flexynesis plot" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description>tool for visualizing flexynesis results</description>
    <macros>
        <import>macros.xml</import>
    </macros>
    <expand macro="requirements"/>
    <command detect_errors="exit_code"><![CDATA[
        @CHECK_NON_COMMERCIAL_USE@
        mkdir -p inputs/ plots/ &&
        #if $plot_conditional.plot_type == "dimred":
            ln -s $plot_conditional.embeddings 'inputs/$plot_conditional.embeddings.element_identifier.$plot_conditional.embeddings.ext' &&
            ln -s $plot_conditional.labels 'inputs/$plot_conditional.labels.element_identifier.$plot_conditional.labels.ext' &&
        #end if
        python '$flexynesis_plot_config'
    ]]></command>
    <configfiles>
        <configfile name="flexynesis_plot_config"><![CDATA[
import sys
sys.path.append('$__tool_directory__/')

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import torch
from flexynesis import (
    build_cox_model,
    get_important_features,
    plot_dim_reduced,
    plot_hazard_ratios,
    plot_kaplan_meier_curves,
    plot_pr_curves,
    plot_roc_curves,
    plot_scatter
)
from scipy.stats import kruskal, mannwhitneyu
from flexynesis_plot import (
    plot_label_concordance_heatmap,
    plot_boxplot,
    detect_color_type,
    load_labels,
    load_embeddings,
    match_samples_to_embeddings
)
#if $plot_conditional.plot_type == "dimred":
label_data = load_labels('inputs/$plot_conditional.labels.element_identifier.$plot_conditional.labels.ext')
embeddings, sample_names = load_embeddings('inputs/$plot_conditional.embeddings.element_identifier.$plot_conditional.embeddings.ext')
matched_labels = match_samples_to_embeddings(sample_names, label_data)

color_type = detect_color_type(matched_labels['$plot_conditional.label'])

fig = plot_dim_reduced(
    matrix=embeddings,
    labels=matched_labels['$plot_conditional.label'],
    method='$plot_conditional.method',
    color_type=color_type
)
output_path = "plots/${plot_conditional.label}_${plot_conditional.method}.${plot_conditional.format}"
fig.save(output_path, dpi=$plot_conditional.dpi, bbox_inches='tight')
#else if $plot_conditional.plot_type == "scatter":

        ]]></configfile>
    </configfiles>
    <inputs>
        <param name="non_commercial_use" label="I certify that I am not using this tool for commercial purposes." type="boolean" truevalue="NON_COMMERCIAL_USE" falsevalue="COMMERCIAL_USE" checked="False">
            <validator type="expression" message="This tool is only available for non-commercial use.">value == True</validator>
        </param>
        <conditional name="plot_conditional">
            <param name="plot_type" type="select" label="flexynesis plot">
                <option value="dimred">Dimensionality reduction</option>
                <option value="scatter">Scatter plot of known vs predicted labels</option>
                <option value="concordance_heatmap">Label concordance heatmap</option>
                <option value="pr_curve">Precision-recall curves</option>
                <option value="roc_curve">ROC curves</option>
                <option value="box_plot">Box plot</option>
            </param>
            <when value="dimred">
                <expand macro="plots">
                    <expand macro="common_plot_input"/>
                    <param argument="--embeddings" type="data" format="tabular,csv" label="Embeddings" help="Generated by flexynesis"/>
                    <param argument="--label" type="text" label="Labels" help="column name in the labels file to use for coloring the points in the plot.">
                        <sanitizer invalid_char="">
                            <valid initial="string.printable"></valid>
                        </sanitizer>
                    </param>
                    <param name="method" type="select" label="Transformation method">
                        <option value="pca" selected="true">PCA</option>
                        <option value="umap">UMAP</option>
                    </param>
                </expand>
            </when>
            <when value="scatter">
                <expand macro="plots">
                    <expand macro="common_plot_input"/>
                </expand>
            </when>
            <when value="concordance_heatmap">
                <expand macro="plots">
                    <expand macro="common_plot_input"/>
                </expand>
            </when>
            <when value="pr_curve">
                <expand macro="plots">
                    <expand macro="common_plot_input"/>
                </expand>
            </when>
            <when value="roc_curve">
                <expand macro="plots">
                    <expand macro="common_plot_input"/>
                </expand>
            </when>
            <when value="box_plot">
                <expand macro="plots">
                    <expand macro="common_plot_input"/>
                </expand>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data name="plot_out" auto_format="true" from_work_dir="plots/*"/>
    </outputs>
    <tests>
        <test>
            <param name="non_commercial_use" value="True"/>
            <conditional name="plot_conditional">
                <param name="plot_type" value="dimred"/>
                <param name="embeddings" value="embeddings.csv"/>
                <param name="label" value="predicted_label"/>
                <param name="method" value="pca"/>
                <param name="labels" value="labels.csv"/>
                <param name="format" value="jpg"/>
                <param name="dpi" value="300"/>
            </conditional>
            <output name="plot_out">
                <assert_contents>
                    <has_image_center_of_mass center_of_mass="970,733" eps="50"/>
                    <has_image_channels channels="3"/>
                    <has_image_height height="1461" delta="50"/>
                    <has_image_width width="1941" delta="50"/>
                </assert_contents>
            </output>
        </test>
    </tests>
    <help><![CDATA[
    **Flexynesis plot**



    ]]></help>
    <citations>
        <citation type="doi">10.1101/2024.07.16.603606</citation>
    </citations>
</tool>
<tool id="parabricks" name="parabricks" version="@TOOL_VERSION@+galaxy@VERSION_SUFFIX@" profile="@PROFILE@">
    <description>parabricks</description>
    <macros>
        <token name="@TOOL_VERSION@">0.0.4.1</token>
        <token name="@VERSION_SUFFIX@">0</token>
        <token name="@PROFILE@">24.2</token>
    </macros>
    <creator>
        <organization name="European Galaxy Team" url="https://galaxyproject.org/eu/"/>
        <person givenName="Anup" familyName="Kumar" email="kumara@informatik.uni-freiburg.de"/>
    </creator>
    <requirements>
        <container type="docker">nvcr.io/nvidia/clara/clara-parabricks:4.5.1-1</container>
    </requirements>
    <command detect_errors="aggressive"><![CDATA[
    ln -s '${reference_source.ref_file}' reference.fasta &&
    ln -s '${fastq_input1}' input1.fasta &&
    ln -s '${fastq_input2}' input2.fasta &&
    ln -s '${output_mapping}' output_mapping.bam &&
    pbrun fq2bam --ref reference.fasta --in-fq input1.fasta input2.fasta --out-bam output_mapping.bam
]]>
    </command>
    <inputs>
        <conditional name="reference_source">
            <param name="reference_source_selector" type="select" label="Will you select a reference genome from your history or use a built-in index?" help="Built-ins were indexed using default options. See `Indexes` section of help below. If you would like to perform self-mapping select `history` here, then choose your input file as reference.">
                <option value="cached">Use a built-in genome index</option>
                <option value="history">Use a genome from history and build index</option>
            </param>
            <when value="cached">
                <param name="ref_file" type="select" label="Using reference genome" help="Select genome from the list">
                    <options from_data_table="all_fasta">
                        <filter type="sort_by" column="2" />
                        <validator type="no_options" message="No reference genomes are available" />
                    </options>
                    <validator type="no_options" message="A built-in reference genome is not available for the build associated with the selected input file"/>
                </param>
            </when>
            <when value="history">
                <param name="ref_file" type="data" format="fasta,fastq" label="Use the following dataset as the reference sequence" help="You can upload a FASTA or FASTQ sequence to the history and use it as reference" />
            </when>
        </conditional>
        <conditional name="fastq_input">
            <param name="fastq_input_selector" type="select" label="Single or Paired-end reads" help="Select between paired and single end data">
                <option value="single">Single</option>
                <option value="paired">Paired</option>
            </param>
            <when value="single">
                <param name="fastq_input1" type="data" format="fastqsanger,fastqsanger.gz,fasta" label="Select fastq dataset" help="Specify dataset with single reads"/>
            </when>
            <when value="paired">
                <param name="fastq_input1" type="data" format="fastqsanger,fastqsanger.gz,fasta" label="Select first set of reads" help="Specify dataset with forward reads"/>
                <param name="fastq_input2" type="data" format="fastqsanger,fastqsanger.gz,fasta" label="Select second set of reads" help="Specify dataset with reverse reads"/>
            </when>
        </conditional>
    </inputs>
    <outputs>
        <data format="bam" name="output_mapping" label="Mappings"></data>
    </outputs>
    <tests>
        <test>
            <param name="reference_source.ref_file" value="input_ref_genome.fasta"/>
            <param name="fastq_input1" value="input_reads.fasta"/>
            <output name="output_mapping" ftype="bam">
                <assert_contents>
                    <has_size size="920950" delta="100" />
                </assert_contents>
            </output>
        </test>
    </tests>
    <help>
        <![CDATA[
**What it does**
 
 Parabricks is a tool for high-performance genomic data analysis, particularly designed for mapping reads to a reference genome. It leverages GPU acceleration to significantly speed up the alignment process.
 

**Input files**


**Output files**


        ]]>
    </help>
    <citations>
        <citation type="bibtex">
            @ARTICLE{zhao2024doclayoutyoloenhancingdocumentlayout,
                Author = {Zhao, Zhiyuan and et al.},
                title = {{DocLayout-YOLO: Enhancing Document Layout Analysis through Diverse Synthetic Data and Global-to-Local Adaptive Perception}},
                url = {https://github.com/opendatalab/DocLayout-YOLO}
            }
        </citation>
    </citations>
</tool>

<tool id="sklearn_nn_classifier" name="Nearest Neighbors Classification" version="@VERSION@">
    <description></description>
    <macros>
        <import>main_macros.xml</import>
    </macros>
    <expand macro="python_requirements"/>
    <expand macro="macro_stdio"/>
    <version_command>echo "@VERSION@"</version_command>
    <command><![CDATA[
    python '$nnc_script' '$inputs'
]]>
    </command>
    <configfiles>
        <inputs name="inputs"/>
        <configfile name="nnc_script">
<![CDATA[
import sys
import json
import numpy as np
import sklearn.neighbors
import pandas
import h5py

execfile("$__tool_directory__/sk_whitelist.py")
execfile("$__tool_directory__/utils.py", globals())

input_json_path = sys.argv[1]
with open(input_json_path, "r") as param_handler:
    params = json.load(param_handler)

#if $selected_tasks.selected_task == "load":

h5file = h5py.File("$infile_model", 'r')
class_name = h5file.get("class_name").value
class_path = h5file.get("class_path").value
classifier = SafePickler.find_class(class_path, class_name)
classifier_object = classifier()
for key in h5file.keys():
    if h5file.get(key).__class__.__name__ == 'Group':
        train_data = h5file.get(key+'/data').value
        class_name = h5file.get(key+'/class_name').value
        class_path_modules = class_path.split('.')
        for index, item in enumerate(class_path_modules):
            path = ".".join(class_path_modules[:len(class_path_modules) - index])
            try:
                module_obj = SafePickler.find_class(path, class_name)
                val = module_obj(train_data)
                setattr(classifier_object, key, val)
            except:
                continue
    else:
        data = h5file.get(key).value
        setattr(classifier_object, key, data)

header = 'infer' if params["selected_tasks"]["header"] else None
data = pandas.read_csv("$selected_tasks.infile_data", sep='\t', header=header, index_col=None, parse_dates=True, encoding=None, tupleize_cols=False)
prediction = classifier_object.predict(data)
prediction_df = pandas.DataFrame(prediction)
res = pandas.concat([data, prediction_df], axis=1)
res.to_csv(path_or_buf = "$outfile_predict", sep="\t", index=False)

#else:

X, y = get_X_y(params, "$selected_tasks.selected_algorithms.input_options.infile1" ,"$selected_tasks.selected_algorithms.input_options.infile2")

selected_algorithm = params["selected_tasks"]["selected_algorithms"]["selected_algorithm"]

if selected_algorithm == "nneighbors":
    classifier = params["selected_tasks"]["selected_algorithms"]["sampling_methods"]["sampling_method"]
    sys.stdout.write(classifier)
    options = params["selected_tasks"]["selected_algorithms"]["sampling_methods"]["options"]
    sys.stdout.write(str(options))
elif selected_algorithm == "ncentroid":
    options = params["selected_tasks"]["selected_algorithms"]["options"]
    classifier = "NearestCentroid"

my_class = getattr(sklearn.neighbors, classifier)
classifier_object = my_class(**options)
classifier_object.fit(X, y)

classifier_dict = classifier_object.__dict__
classifier_dict["class_path"] = classifier_object.__module__ 
classifier_dict["class_name"] = classifier_object.__class__.__name__

with h5py.File("$outfile_fit", 'w') as h5file:
    for dict_item, val in classifier_dict.items():
        if val is not None:
            type_name = type(val).__name__
            try:
                if type_name in ['ndarray']:
                    h5file.create_dataset(dict_item, (val.shape), data=np.array(val, dtype=val.dtype.name))
                else:
                    h5file.create_dataset(dict_item, data=val)
            except:
                if val:
                    class_name = val.__class__.__name__
                    train_data = np.array(val.data)
                    dict_group = h5file.create_group(dict_item)
                    dict_group.create_dataset("class_name", data=class_name)
                    dict_group.create_dataset("data", (train_data.shape), data=np.array(train_data, dtype=train_data.dtype.name))
                else:
                    h5file.create_dataset(dict_item, data=json.dumps(val))
                    continue

#end if

]]>
        </configfile>
    </configfiles>
    <inputs>
        <expand macro="sl_Conditional" model="h5"><!--Todo: add sparse to targets-->
            <param name="selected_algorithm" type="select" label="Classifier type">
                <option value="nneighbors">Nearest Neighbors</option>
                <option value="ncentroid">Nearest Centroid</option>
            </param>
            <when value="nneighbors">
                <expand macro="sl_mixed_input"/>
                <conditional name="sampling_methods">
                    <param name="sampling_method" type="select" label="Neighbor selection method">
                        <option value="KNeighborsClassifier" selected="true">K-nearest neighbors</option>
                        <option value="RadiusNeighborsClassifier">Radius-based</option>
                    </param>
                    <when value="KNeighborsClassifier">
                        <expand macro="nn_advanced_options">
                            <param argument="n_neighbors" type="integer" optional="true" value="5" label="Number of neighbors" help=" "/>
                        </expand>
                    </when>
                    <when value="RadiusNeighborsClassifier">
                        <expand macro="nn_advanced_options">
                            <param argument="radius" type="float" optional="true" value="1.0" label="Radius"
                                help="Range of parameter space to use by default for :meth ''radius_neighbors'' queries."/>
                        </expand>
                    </when>
                </conditional>
            </when>
            <when value="ncentroid">
                 <expand macro="sl_mixed_input"/>
                <section name="options" title="Advanced Options" expanded="False">
                    <param argument="metric" type="text" optional="true" value="euclidean" label="Metric"
                        help="The metric to use when calculating distance between instances in a feature array."/>
                    <param argument="shrink_threshold" type="float" optional="true" value="" label="Shrink threshold"
                        help="Floating point number for shrinking centroids to remove features."/>
                </section>
            </when>
        </expand>
    </inputs>

    <outputs>
      <data format="tabular" name="outfile_predict">
          <filter>selected_tasks['selected_task'] == 'load'</filter>
      </data>
      <data format="h5" name="outfile_fit" label="${tool.name}.${selected_tasks.selected_algorithms.selected_algorithm}">
          <filter>selected_tasks['selected_task'] == 'train'</filter>
      </data>
    </outputs>

    <tests>
        <test>
            <param name="infile1" value="train_set.tabular" ftype="tabular"/>
            <param name="infile2" value="train_set.tabular" ftype="tabular"/>
            <param name="header1" value="True"/>
            <param name="header2" value="True"/>
            <param name="col1" value="1,2,3,4"/>
            <param name="col2" value="5"/>
            <param name="selected_task" value="train"/>
            <param name="selected_algorithm" value="nneighbors"/>
            <param name="sampling_method" value="KNeighborsClassifier" />
            <param name="algorithm" value="brute" />
            <output name="outfile_fit" file="nn_model01.h5" compare="sim_size"/>
        </test>
        <test>
            <param name="infile1" value="train_set.tabular" ftype="tabular"/>
            <param name="infile2" value="train_set.tabular" ftype="tabular"/>
            <param name="header1" value="True"/>
            <param name="header2" value="True"/>
            <param name="col1" value="1,2,3,4"/>
            <param name="col2" value="5"/>
            <param name="selected_task" value="train"/>
            <param name="selected_algorithm" value=""/>
            <param name="selected_algorithm" value="nneighbors"/>
            <param name="sampling_method" value="RadiusNeighborsClassifier" />
            <output name="outfile_fit" file="nn_model02.h5" compare="sim_size"/>
        </test>
        <test>
            <param name="infile1" value="train_set.tabular" ftype="tabular"/>
            <param name="infile2" value="train_set.tabular" ftype="tabular"/>
            <param name="header1" value="True"/>
            <param name="header2" value="True"/>
            <param name="col1" value="1,2,3,4"/>
            <param name="col2" value="5"/>
            <param name="selected_task" value="train"/>
            <param name="selected_algorithm" value="ncentroid"/>
            <output name="outfile_fit" file="nn_model03.h5" compare="sim_size"/>
        </test>
        <test>
            <param name="infile_model" value="nn_model01.h5" ftype="h5"/>
            <param name="infile_data" value="test_set.tabular" ftype="tabular"/>
            <param name="header" value="True"/>
            <param name="selected_task" value="load"/>
            <output name="outfile_predict" file="nn_prediction_result01.tabular"/>
        </test>
        <test>
            <param name="infile_model" value="nn_model02.h5" ftype="h5"/>
            <param name="infile_data" value="test_set.tabular" ftype="tabular"/>
            <param name="header" value="True"/>
            <param name="selected_task" value="load"/>
            <output name="outfile_predict" file="nn_prediction_result02.tabular"/>
        </test>
        <test>
            <param name="infile_model" value="nn_model03.h5" ftype="h5"/>
            <param name="infile_data" value="test_set.tabular" ftype="tabular"/>
            <param name="header" value="True"/>
            <param name="selected_task" value="load"/>
            <output name="outfile_predict" file="nn_prediction_result03.tabular"/>
        </test>
    </tests>
    <help><![CDATA[
**What it does**
This module implements the k-nearest neighbors classification algorithms.
For more information check http://scikit-learn.org/stable/modules/neighbors.html
    ]]></help>
    <expand macro="sklearn_citation"/>
</tool>
